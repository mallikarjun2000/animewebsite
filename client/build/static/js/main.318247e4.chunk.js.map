{"version":3,"sources":["assets/carousel1.jpg","assets/placeholder-img.jpg","Components/Carousel.js","Components/Home.js","Components/Nav.js","Components/SingleListItem.js","Components/TopAnime.js","Components/NewAnime.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","carousel","id","className","data-ride","width","class","src","alt","Home","handleSearch","event","setState","search_text","target","value","state","show","onChange","this","style","marginTop","marginLeft","height","placeholder","Carousel","React","Component","Nav","to","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","SingleListItem","anime_data","props","singleanime","title","img_url","image_url","episodes","console","log","start_date","rank","TopAnime","webdata","axios","get","then","res","data","top","catch","err","alert","map","SINGLEANIME","NewAnime","backgroundColor","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.318247e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/carousel1.d7ae3ace.jpg\";","module.exports = __webpack_public_path__ + \"static/media/placeholder-img.15175427.jpg\";","import React from 'react';\r\nimport carousel1 from '../assets/carousel1.jpg';\r\n\r\nfunction carousel(){\r\n    return( \r\n        <div id=\"carouselExampleSlidesOnly\" className=\"carousel slide\" data-ride=\"carousel\" width=\"100px\">\r\n           <div class=\"carousel-item\">\r\n            <img src=\"...\" alt=\"...\"/>\r\n            <div class=\"carousel-caption d-none d-md-block\">\r\n                <h5>...</h5>\r\n                <p>...</p>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default carousel;","import React from 'react';\r\nimport '../Components/home.css';\r\nimport Carousel from './Carousel';\r\n\r\nclass Home extends React.Component{\r\n\r\n    componentDidMount(){\r\n    }\r\n\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            show : false,\r\n            search_text : null\r\n        }\r\n    }\r\n\r\n    handleSearch=(event)=>{\r\n        this.setState({search_text : event.target.value });\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div className=\"home-main-div\">\r\n                <div className=\"home-title\">Anime Buzz</div>\r\n                <div className=\"home-description\"> Now All your Favourate anime in one website . </div>\r\n                <input className=\"home-seach-input\" \r\n                onChange={this.handleSearch}\r\n                value={this.state.search_text}\r\n                style={{marginTop:\"100px\",\r\n                        width:\"70%\",\r\n                        marginLeft:\"0px\",\r\n                        height:\"40px\"}}\r\n                        placeholder=\" search your anime\" />\r\n                <button className=\"btn btn-primary\"\r\n                style={{\r\n                    marginTop:\"-6px\",\r\n                    marginLeft:\"10px\"\r\n                }}>Search</button>\r\n                <Carousel/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport './nav.css'\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Nav extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <Link to='/'>\r\n            <a class=\"nav-home\"  href=\"#\" >Anime Buzz</a>\r\n            </Link>\r\n            <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span class=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                <ul class=\"navbar-nav\">\r\n                <li class=\"nav-item\">\r\n                <Link to='/topanime' >\r\n                <a class=\"nav-link nav-top \"  href=\"#\">Top Anime</a>\r\n                </Link>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                <Link to='/newanime'>\r\n                <a class=\"nav-link nav-new-anime\" href=\"#\" >New upcomming Anime</a>\r\n                </Link>\r\n                </li>\r\n                </ul>\r\n            </div>\r\n            </nav>\r\n        )\r\n    }\r\n    /*\r\n    <nav class=\"nav navbar-expand-lg bg-dark\">\r\n            <a class=\"nav-home\" href=\"#\">Anime Buzz</a>\r\n            <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <a class=\"nav-link nav-top active\" href=\"#\">Top Aime</a>\r\n                <a class=\"nav-link nav-new-anime \" href=\"#\">New upcomming Anime</a>\r\n            </div>\r\n            </nav>\r\n    */\r\n\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport './singlelistitem.css';\r\nimport PlaceHolder from '../assets/placeholder-img.jpg';\r\n\r\nclass SingleListItem extends React.Component{\r\n    render(){\r\n\r\n        const anime_data = this.props.singleanime;\r\n        const title = anime_data.title;\r\n        const img_url = anime_data.image_url;\r\n        const episodes = anime_data.episodes;\r\n        console.log(img_url);\r\n\r\n        var airing=false,disply;\r\n        if(airing)\r\n            disply = \"Airing\"\r\n        else\r\n            disply= \"Not Airing\"\r\n\r\n        return(\r\n            <div className=\"card single-card\">\r\n                <img className=\"single-img\" src={img_url} alt=\"..\"/>\r\n                <div className=\"single-name\">{title}</div>\r\n                <p className=\"single-start-date\">{anime_data.start_date}</p>\r\n                <div className=\"single-rating-div\" >\r\n                    <div className=\"single-rating\" >Rating : </div>\r\n                    <div>{anime_data.rank}</div>\r\n                </div>\r\n                <button className=\"btn btn-primary single-btn\"\r\n                >Know More</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SingleListItem;","import React from 'react';\r\nimport axios from 'axios';\r\nimport SingleAnime from './SingleListItem';\r\nimport './topanime.css';\r\n\r\nclass TopAnime extends React.Component {\r\n\r\n    componentDidMount(){\r\n        const url = 'https://api.jikan.moe/v3/top/anime/1/upcoming';\r\n        axios.get(url)\r\n        .then(res=>{console.log(res);\r\n                    this.setState({webdata : res.data.top});\r\n        })\r\n        .catch(err=>{alert('error' , err)});\r\n    }\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            webdata : null\r\n        }\r\n    }\r\n\r\n    render(){\r\n        if(this.state.webdata==null)\r\n        {\r\n            return(\r\n            <div>\r\n                Loading ... \r\n            </div>\r\n            )\r\n        }\r\n        return(\r\n            <div className=\"top-main-main\">\r\n            <div className=\"top-title\">Top Anime List</div>\r\n            <div className=\"top-main-div\">\r\n                {\r\n                    this.state.webdata.map(SINGLEANIME=>{\r\n                        return <SingleAnime singleanime={SINGLEANIME} />\r\n                    })\r\n                }\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default TopAnime;","import React from 'react';\r\n\r\nclass NewAnime extends React.Component{\r\n    render() {\r\n        return (\r\n             <div style={{backgroundColor:\"black\"}}>\r\n                 NEw Anime\r\n             </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewAnime;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Home from  './Components/Home';\nimport NavComponent from './Components/Nav';\nimport TopAnime from './Components/TopAnime';\nimport NewAnime from './Components/NewAnime';\nimport { BrowserRouter as Router , Switch , Route } from 'react-router-dom';\n\n\nfunction App() {\n  return (\n    <Router>\n    <NavComponent/>\n    <div className=\"App\">\n        <Switch>\n            <Route path='/' exact component={Home}/>\n            <Route path='/topanime' exact component={TopAnime}/>\n            <Router path='/newanime' exact component={NewAnime}/>\n        </Switch>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}